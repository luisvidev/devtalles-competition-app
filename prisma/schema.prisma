// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  user
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(user)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  /// This field is the raffle created by an user ADMIN
  raffle    Raffle?

  subscriptions Subscription[]
}

model Raffle {
  id                 String         @id @default(uuid())
  name               String         @unique
  description        String
  termsAndConditions String
  imageUrl           String?
  timezone           String
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  endAt              DateTime
  authorId           String         @unique
  author             User           @relation(fields: [authorId], references: [id])
  prizes             Prize[]
  subscribers        Subscription[]
}

model Prize {
  id          String        @id @default(uuid())
  name        String
  description String?
  raffleId    String
  raffle      Raffle        @relation(fields: [raffleId], references: [id], onDelete: Cascade)
  winnerId    String?
  winner      Subscription?
}

model Subscription {
  id String @id @default(uuid())

  /// subscriber
  userId String
  user   User   @relation(fields: [userId], references: [id])

  raffleId String
  raffle   Raffle @relation(fields: [raffleId], references: [id], onDelete: Cascade)

  /// If the subscriber wins, this is relation with the prize
  prizeId String? @unique
  prize   Prize?  @relation(fields: [prizeId], references: [id])
}
